@using RBDProject.Controllers
@using RBDProject.Models;

@inject IJSRuntime _jSRuntime

<!-- Modal Nuevo y actualizar-->
<RBDProject.Components.Layout.Modal_Form _Title="@utility">
    @* FORMULARIO *@
    @* FORMULARIO *@
    <EditForm Model="modelo" OnValidSubmit=SendModel>
        <DataAnnotationsValidator />
        <div class="modal-body container">
            <div class="mb-3 row">
                <label class="form-label">Nombre (Obligatorio)</label>
                <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.NomCiudad></InputText>
                <ValidationMessage For="(() => modelo.NomCiudad)" />
            </div>
            <div class="mb-3 row">
                <label class="form-label">Codigo Postal</label>
                <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.CodPostal></InputText>
                <ValidationMessage For="(() => modelo.CodPostal)" />
            </div>
            <div>
                <label class="form-label">Provincia (Obligatorio)</label>
                <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.IdProvincia">
                    @foreach (var e in listProvincia)
                    {
                        <option value="@e.IdProvincia">@e.NomProvincia</option>
                    }
                </InputSelect>
                <ValidationMessage For="(() => modelo.IdProvincia)"></ValidationMessage>
            </div>
        </div>
        @* BOTONES *@
        <div class="modal-footer">
            @if (utility == "Crear")
            {
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#Limpiar">Limpiar</button>
            }

            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

            <button type="submit" class="btn btn-primary">@utility</button>
        </div>
    </EditForm>
</RBDProject.Components.Layout.Modal_Form>

<RBDProject.Components.Layout.Modal_Delete Delete="SendModel" _nombreModelo="@modelo.NomCiudad"></RBDProject.Components.Layout.Modal_Delete>
<RBDProject.Components.Layout.Modal_Limpiar Limpiar="Clean"></RBDProject.Components.Layout.Modal_Limpiar>

@code {
    private bool _disabled { get; set; } = false;

    [Parameter]
    public RbdCiudade modelo { get; set; } = new RbdCiudade();

    [Parameter]
    public List<RbdProvincium> listProvincia { get; set; } = new List<RbdProvincium>();

    [Parameter]
    public string utility { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<RbdCiudade> UpdateModel { get; set; }

    [Parameter]
    public EventCallback<RbdCiudade> AddModel { get; set; }

    [Parameter]
    public EventCallback<RbdCiudade> DeleteModel { get; set; }

    [Parameter]
    public EventCallback<(RbdCiudade, string)> SendTypeModal { get; set; }

    protected override void OnParametersSet()
    {
        _disabled = false;

        switch (utility)
        {
            case "add": utility = "Crear"; break;
            case "update": utility = "Actualizar"; break;
            case "delete": utility = "Eliminar"; break;

            case "info":
                {
                    utility = "Informacion";
                    _disabled = true;
                }
                ; break;
        }

        StateHasChanged();
    }

    public void Clean()
    {
        modelo = new RbdCiudade();
        StateHasChanged();
    }

    public async Task SendModel()
    {
        switch (utility)
        {
            case "Crear":
                {
                    await AddModel.InvokeAsync(modelo);
                    Clean();
                    var a = _jSRuntime.InvokeVoidAsync("Notification", "Ciudad creada");
                    StateHasChanged();
                }
                ; break;
            case "Actualizar":
                {
                    await UpdateModel.InvokeAsync(modelo);
                    var a = _jSRuntime.InvokeVoidAsync("Notification", "Ciudad actualizada");
                    StateHasChanged();
                }
                    ; break;
            case "Eliminar": await DeleteModel.InvokeAsync(modelo); break;
        }
    }
}