@using RBDProject.Controllers
@using RBDProject.Models;

@inject IJSRuntime _jSRuntime

<!-- Modal Nuevo y actualizar-->
<RBDProject.Components.Layout.Modal_Form _Title="@utility">
    @* FORMULARIO *@
    @* FORMULARIO *@
    <EditForm Model="modelo" OnValidSubmit="SendModel">
        <DataAnnotationsValidator />
        <div class="modal-body container">
            <div class="mb-3 row">
                <label class="form-label">Nombre (Obligatorio)</label>
                <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.NomPago></InputText>
                <ValidationMessage For="(() => modelo.NomPago)" />
            </div>
            <div class="mb-3 row">
                <label class="form-label">Descripcion</label>
                <InputDate class="form-control" disabled="true" @bind-Value=modelo.FecCreacion></InputDate>
                <ValidationMessage For="(() => modelo.FecCreacion)" />
            </div>

            @if (listEstados != null)
            {
                <div class="mb-3 row">
                    <label for="exampleFormControlTextarea1" class="form-label">Estado</label>
                    <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.CodEst">
                        @foreach (var e in listEstados)
                        {
                            <option value="@e.CodEst">@e.NomEst</option>

                        }
                    </InputSelect>
                    <ValidationMessage For="(() => modelo.CodEst)" />
                </div>
            }
        </div>
        @* BOTONES *@
        <div class="modal-footer">
            @if (utility == "Crear")
            {
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#Limpiar">Limpiar</button>
            }

            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

            @if (utility != "Actualizar")
            {
                <button type="submit" class="btn btn-primary">@utility</button>
            }
        </div>
    </EditForm>
</RBDProject.Components.Layout.Modal_Form>

<RBDProject.Components.Layout.Modal_Delete Delete="SendModel" _nombreModelo="@modelo.NomPago"></RBDProject.Components.Layout.Modal_Delete>
<RBDProject.Components.Layout.Modal_Limpiar Limpiar="Clean"></RBDProject.Components.Layout.Modal_Limpiar>

@code {
    private bool _disabled { get; set; } = false;

    [Parameter]
    public RbdTipoPago modelo { get; set; } = new RbdTipoPago();

    [Parameter]
    public List<RbdEstado> listEstados { get; set; } = new List<RbdEstado>();

    [Parameter]
    public string utility { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<RbdTipoPago> UpdateModel { get; set; }

    [Parameter]
    public EventCallback<RbdTipoPago> AddModel { get; set; }

    [Parameter]
    public EventCallback<RbdTipoPago> DeleteModel { get; set; }

    [Parameter]
    public EventCallback<(RbdTipoPago, string)> SendTypeModal { get; set; }

    protected override void OnParametersSet()
    {
        _disabled = false;

        switch (utility)
        {
            case "add": utility = "Crear"; break;
            case "update": utility = "Actualizar"; break;
            case "delete": utility = "Eliminar"; break;

            case "info":
                {
                    utility = "Informacion";
                    _disabled = true;
                }
                ; break;
        }

        if (utility == "Crear")
            ConfiguracionInicial();

        StateHasChanged();
    }

    public void Clean()
    {
        modelo = new RbdTipoPago();
        StateHasChanged();
    }

    public void ConfiguracionInicial()
    {
        if(listEstados!=null && listEstados.Count() > 0)
        {
            modelo.CodEst = listEstados.First().CodEst;
        }
    }

    public async Task SendModel()
    {
        switch (utility)
        {
            case "Crear": {
                    await AddModel.InvokeAsync(modelo);
                    Clean();
                    var a = _jSRuntime.InvokeVoidAsync("Notification", "Tipos de pagos creados");
                    ConfiguracionInicial();
                    StateHasChanged();
                }; break;
            case "Actualizar":
                {
                    await UpdateModel.InvokeAsync(modelo);
                    var a = _jSRuntime.InvokeVoidAsync("Notification", "Tipos de pagos actualizados");
                    StateHasChanged();
                }; break;
            case "Eliminar": await DeleteModel.InvokeAsync(modelo); break;
        }
    }
}
