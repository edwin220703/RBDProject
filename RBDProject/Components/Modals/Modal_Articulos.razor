@using RBDProject.Controllers
@using RBDProject.Models;
@rendermode InteractiveServer

<!-- Modal Nuevo y actualizar-->
<RBDProject.Components.Layout.Modal_Form _largeModal="true" _Title="@utility">
    @* FORMULARIO *@
    <EditForm Model="modelo" OnValidSubmit="SendModel">
        <DataAnnotationsValidator />
        <div class="modal-body d-flex flex-row gap-5 nowrap">
            <section style="width:300px">
                <div class="mb-3 row">
                    <label class="form-label">ID</label>
                    <InputText class="form-control" disabled="true" @bind-Value=modelo.IdArt></InputText>
                    <ValidationMessage For="(() => modelo.IdArt)" />
                </div>
                <div class="mb-3 row">
                    <label class="form-label">Nombre</label>
                    <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.NomArt></InputText>
                    <ValidationMessage For="(() => modelo.NomArt)" />
                </div>
                <div class="mb-3 row">
                    <label class="form-label">Descripcion</label>
                    <InputTextArea class="form-control" disabled="@_disabled" @bind-Value=modelo.DesArt></InputTextArea>
                </div>
            </section>
            <section style="width:300px">
                <div class="mb-3 row">
                    <label class="form-label">Existencias</label>
                    <InputNumber class="form-control" disabled="@_disabled" @bind-Value=modelo.ExistArt></InputNumber>
                    <ValidationMessage For="(() => modelo.ExistArt)" />
                </div>
                <div class="mb-3 row">
                    <label class="form-label">Fecha De Creacion</label>
                    <InputDate class="form-control" disabled="true" @bind-Value=modelo.FecArt></InputDate>
                    <ValidationMessage For="(() => modelo.FecArt)" />
                </div>

                @if (_listGrupos != null)
                {
                    <div class="mb-3 row">
                        <label for="exampleFormControlTextarea1" class="form-label">Grupos</label>
                        <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.CodGrup">
                            @foreach (var e in _listGrupos)
                            {
                                <option value="@e.CodGrup">@e.NomGrup</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => modelo.CodGrup)" />
                    </div>
                }

                @if (_listEstados != null)
                {
                    <div class="mb-3 row">
                        <label for="exampleFormControlTextarea1" class="form-label">Estado</label>
                        <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.CodEst">
                            @foreach (var e in _listEstados)
                            {
                                <option value="@e.CodEst">@e.NomEst</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => modelo.CodEst)" />
                    </div>
                }

            </section>

            <section style="width:300px">

                @if (_listPrecio.Count != 0)
                {
                    @foreach (var l in _listPrecio)
                    {
                        <div class="mb-3 row">
                            <label class="form-label">Precio</label>
                            <div class="d-flex flex-row gap-1">
                                <InputNumber class="form-control" disabled="@_disabled" @bind-Value="@l.Precio" />
                                @if (utility != "info")
                                {
                                    <RadzenButton Icon="delete" Disabled=@(utility == "Informacion") ButtonStyle="ButtonStyle.Danger" Click="@(() => DeletePrecio(l))"></RadzenButton>
                                }
                            </div>
                        </div>
                    }
                }

                @if (utility != "Informacion" && _listPrecio.Count < 4)
                {
                    <button class="btn btn-primary" @onclick=@(() => AddPrecio())>Agregar Precio</button>
                }

            </section>

        </div>
        @* BOTONES *@
        <div class="modal-footer">
            @if (utility == "Crear")
            {
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#Limpiar">Limpiar</button>
            }

            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

            <button type="submit" class="btn btn-primary">@utility</button>
        </div>
    </EditForm>
</RBDProject.Components.Layout.Modal_Form>

<RBDProject.Components.Layout.Modal_Delete Delete="SendModel" _nombreModelo="@modelo.NomArt"></RBDProject.Components.Layout.Modal_Delete>
<RBDProject.Components.Layout.Modal_Limpiar Limpiar="Clean"></RBDProject.Components.Layout.Modal_Limpiar>


@code {
    private bool _disabled { get; set; } = false;

    private bool _disabledPrecio { get; set; } = false;

    [Parameter]
    public RbdArticulo modelo { get; set; } = new RbdArticulo();

    [Parameter]
    public List<RbdGrupo> _listGrupos { get; set; } = new List<RbdGrupo>();

    [Parameter]
    public List<RbdListaDePrecio> _listPrecio { get; set; } = new List<RbdListaDePrecio>();

    [Parameter]
    public List<RbdEstado> _listEstados { get; set; } = new List<RbdEstado>();

    [Parameter]
    public string utility { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<(RbdArticulo, List<RbdListaDePrecio>)> UpdateModel { get; set; }

    [Parameter]
    public EventCallback<(RbdArticulo, List<RbdListaDePrecio>)> AddModel { get; set; }

    [Parameter]
    public EventCallback<RbdArticulo> DeleteModel { get; set; }

    protected override void OnParametersSet()
    {
        _disabled = false;

        switch (utility)
        {
            case "add": utility = "Crear"; break;
            case "update": utility = "Actualizar"; break;
            case "delete": utility = "Eliminar"; break;

            case "info":
                {
                    utility = "Informacion";
                    _disabled = true;
                }
                ; break;
        }

        StateHasChanged();
    }

    public void Clean()
    {
        modelo = new RbdArticulo();
        StateHasChanged();
    }

    public void AddPrecio()
    {
        if (_listPrecio.Count == 4)
        {
            _disabledPrecio = true;
            return;
        }

        _listPrecio.Add(new RbdListaDePrecio());

        StateHasChanged();
    }

    public void DeletePrecio(RbdListaDePrecio p)
    {
        _listPrecio.Remove(p);
    }

    public async Task SendModel()
    {
        switch (utility)
        {
            case "Crear": await AddModel.InvokeAsync((modelo, _listPrecio)); break;
            case "Actualizar": await UpdateModel.InvokeAsync((modelo, _listPrecio)); break;
            case "Eliminar": await DeleteModel.InvokeAsync(modelo); break;
        }
    }
}