@using RBDProject.Controllers
@using RBDProject.Models;

<!-- Modal Nuevo y actualizar-->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">@utility Articulo</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            @* FORMULARIO *@
            @* FORMULARIO *@
            <div class="modal-body">
                <EditForm class="d-flex flex-row gap-5" Model="modelo" OnSubmit="@(() => AddModel.InvokeAsync((modelo, new List<RbdListaDePrecio>())))">
                    <DataAnnotationsValidator />
                    <section>
                        <div class="mb-3 row">
                            <label class="form-label">ID</label>
                            <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.IdArt></InputText>
                            <ValidationMessage For="(() => modelo.IdArt)" />
                        </div>
                        <div class="mb-3 row">
                            <label class="form-label">Nombre</label>
                            <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.NomArt></InputText>
                            <ValidationMessage For="(() => modelo.NomArt)" />
                        </div>
                        <div class="mb-3 row">
                            <label class="form-label">Descripcion</label>
                            <InputTextArea class="form-control" disabled="@_disabled" @bind-Value=modelo.DesArt></InputTextArea>
                        </div>
                    </section>
                    <section>
                        <div class="mb-3 row">
                            <label class="form-label">Existencias</label>
                            <InputNumber class="form-control" disabled="@_disabled" @bind-Value=modelo.ExistArt></InputNumber>
                            <ValidationMessage For="(() => modelo.ExistArt)" />
                        </div>
                        <div class="mb-3 row">
                            <label class="form-label">Fecha De Creacion</label>
                            <InputDate class="form-control" disabled="true" @bind-Value=modelo.FecArt></InputDate>
                            <ValidationMessage For="(() => modelo.FecArt)" />
                        </div>

                        @if (_listGrupos != null)
                        {
                            <div class="mb-3 row">
                                <label for="exampleFormControlTextarea1" class="form-label">Grupos</label>
                                <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.CodGrup">
                                    @foreach (var e in _listGrupos)
                                    {
                                        <option value="@e.CodGrup">@e.NomGrup</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="(() => modelo.CodGrup)" />
                            </div>
                        }

                        @if (_listEstados != null)
                        {
                            <div class="mb-3 row">
                                <label for="exampleFormControlTextarea1" class="form-label">Estado</label>
                                <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.CodEst">
                                    @foreach (var e in _listEstados)
                                    {
                                        <option value="@e.CodEst">@e.NomEst</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="(() => modelo.CodEst)" />
                            </div>
                        }

                    </section>

                    <section>
                        @foreach (var l in _listPrecio)
                        {
                            <div class="mb-3 row">
                                <label class="form-label">Precio</label>
                                <InputNumber class="form-control" disabled="@_disabled" @bind-Value="@l.Precio" />
                            </div>
                        }


                        @if (_listPrecio != null && _listPrecio.Count < 4)
                        {
                            <button class="btn btn-primary" @onclick=@(() => { if (modelo.RbdListaDePrecios.Count < 4) { _listPrecio.Add(new RbdListaDePrecio()); } })>Agregar Precio</button>
                        }
                    </section>

                </EditForm>
            </div>
            @* BOTONES *@
            <div class="modal-footer">
                @if (utility == "Crear")
                {
                    <button type="button" class="btn btn-primary" @onclick="@Clean">Limpiar</button>
                }

                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

                @if (utility == "Actualizar")
                {
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@(() => UpdateModel.InvokeAsync((modelo, _listPrecio)))">@utility</button>
                }
                else if (utility == "Crear")
                {
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="@(() => AddModel.InvokeAsync((modelo, _listPrecio)))">@utility</button>
                }
                else
                {

                }
            </div>
        </div>
    </div>
</div>

@* MODAL ELIMINAR *@
@* MODAL ELIMINAR *@
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Eliminar Grupo</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Estas seguro de que deseas eliminar a @modelo.NomArt?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="@(() => DeleteModel.InvokeAsync(modelo))">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _disabled { get; set; } = false;

    [Parameter]
    public RbdArticulo modelo { get; set; } = new RbdArticulo();

    [Parameter]
    public List<RbdGrupo> _listGrupos { get; set; } = new List<RbdGrupo>();

    [Parameter]
    public List<RbdListaDePrecio> _listPrecio { get; set; } = new List<RbdListaDePrecio>();

    [Parameter]
    public List<RbdEstado> _listEstados { get; set; } = new List<RbdEstado>();

    [Parameter]
    public string utility { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<(RbdArticulo, List<RbdListaDePrecio>)> UpdateModel { get; set; }

    [Parameter]
    public EventCallback<(RbdArticulo, List<RbdListaDePrecio>)> AddModel { get; set; }

    [Parameter]
    public EventCallback<RbdArticulo> DeleteModel { get; set; }

    protected override void OnParametersSet()
    {
        _disabled = false;

        switch (utility)
        {
            case "add": utility = "Crear"; break;
            case "update": utility = "Actualizar"; break;
            case "delete": utility = "Eliminar"; break;

            case "info":
                {
                    utility = "Informacion";
                    _disabled = true;
                }
                ; break;
        }

        StateHasChanged();
    }

    public async Task Clean()
    {
        modelo = new RbdArticulo();
        StateHasChanged();
    }
}