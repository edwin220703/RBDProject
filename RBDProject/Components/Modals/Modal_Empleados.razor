@using RBDProject.Controllers
@using RBDProject.Models;

@inject IJSRuntime _jSRuntime

<!-- Modal Nuevo y actualizar-->
<RBDProject.Components.Layout.Modal_Form _largeModal=true _Title="@utility">
    @* FORMULARIO *@
    <EditForm Model="modelo" OnValidSubmit="SendModel">
        <div class="modal-body d-flex flex-row flex-nowrap gap-5">
            <DataAnnotationsValidator />
            <section style="width:300px">
                @* ID *@
                <div class="mb-3 row">
                    <label class="form-label">ID</label>
                    <InputText class="form-control" disabled="true" @bind-Value=modelo.IdEm></InputText>
                    <ValidationMessage For="(() => modelo.IdEm)" />
                </div>

                @* NOMBRE *@
                <div class="mb-3 row">
                    <label class="form-label">Nombre (Obligatorio)</label>
                    <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.NomEm></InputText>
                    <ValidationMessage For="(() => modelo.NomEm)" />
                </div>

                @* DNI *@
                <div class="mb-3 row">
                    <label class="form-label">DNI (CEDULA (Obligatorio)</label>
                    <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.DniEm></InputText>
                    <ValidationMessage For="(() => modelo.DniEm)" />
                </div>

                @* SUELDO *@
                <div class="mb-3 row">
                    <label class="form-label">SUELDO (Obligatorio)</label>
                    <InputNumber class="form-control" disabled="@_disabled" @bind-Value=modelo.Suedms></InputNumber>
                    <ValidationMessage For="(() => modelo.Suedms)" />
                </div>

                @* FECHA DE CREACION *@
                <div class="mb-3 row">
                    <label class="form-label">FECHA CREACION</label>
                    <InputDate class="form-control" disabled="true" @bind-Value=modelo.NumPer></InputDate>
                    <ValidationMessage For="(() => modelo.NumPer)" />
                </div>
            </section>

            <section class="d-flex flex-column flex-wrap gap-2" style="width:300px">

                <section>
                    @* USUARIO *@
                    <div class="mb-3 row">
                        <label class="form-label">USUARIO (Obligatorio)</label>
                        <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.NomUs></InputText>
                        <ValidationMessage For="(() => modelo.NomUs)" />
                    </div>

                    @* CLAVE *@
                    <div class="mb-3 row">
                        <label class="form-label">CONTRASEÑA (Obligatorio)</label>
                        <InputText class="form-control" disabled="@_disabled" @bind-Value=modelo.NomClav></InputText>
                        <ValidationMessage For="(() => modelo.NomClav)" />
                    </div>
                </section>
                <section>
                    @* CIUDAD *@
                    <div class="mb-3 row">
                        <label for="exampleFormControlTextarea1" class="form-label">CIUDAD</label>
                        <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.IdCiudad">
                            @foreach (var ci in _listCiudad)
                            {
                                <option value="@ci.IdCiudad">@ci.NomCiudad</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => modelo.IdCiudad)" />
                    </div>

                    @* CALLE *@
                    <div class="mb-3 row">
                        <label for="exampleFormControlTextarea1" class="form-label">Calle</label>
                        <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.IdCalle">
                            @foreach (var ca in _listCalle)
                            {
                                <option value="@ca.IdCalle">@ca.NomCalle</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => modelo.IdCalle)" />
                    </div>

                    @* Detalle direccion *@
                    <div class="mb-3 row">
                        <label class="form-label">DETALLES DE LA DIRECCION</label>
                        <InputTextArea class="form-control" disabled="@_disabled" @bind-Value=modelo.DetallDirec></InputTextArea>
                        <ValidationMessage For="(() => modelo.DetallDirec)" />
                    </div>
                </section>

            </section>

            <section style="width:300px">

                @if (modelo.CodCar != 0 || _listCargo != null)
                {
                    @* CARGO *@
                    <div class="mb-3 row">
                        <label for="exampleFormControlTextarea1" class="form-label">CARGO</label>
                        <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.CodCar">
                            @foreach (var c in _listCargo)
                            {
                                <option value="@c.CodCar">@c.NomCar</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => modelo.CodCar)" />
                    </div>
                }

                @* GENERO *@
                <div class="mb-3 row">
                    <label for="exampleFormControlTextarea1" class="form-label">Genero</label>
                    <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.CodGen">
                        <option value="1">Masculino</option>
                        <option value="2">Femenino</option>
                    </InputSelect>
                    <ValidationMessage For="(() => modelo.CodGen)" />
                </div>

                @if (modelo.CodEst != 0 || _listEstado != null)
                {
                    @* ESTADO *@
                    <div class="mb-3 row">
                        <label for="exampleFormControlTextarea1" class="form-label">Estado</label>
                        <InputSelect class="form-select" disabled="@_disabled" aria-label="Default select example" @bind-Value="modelo.CodEst">
                            @foreach (var e in _listEstado)
                            {
                                <option value="@e.CodEst">@e.NomEst</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="(() => modelo.CodEst)" />
                    </div>
                }

                <label for="exampleFormControlTextarea1" class="form-label">Contacto</label>
                <InputText class="form-control" disabled="@_disabled" aria-label="Default select example" @bind-Value="telefonoEmpleado.TelEm"></InputText>
                <ValidationMessage For="(() => telefonoEmpleado.TelEm)" />
            </section>

        </div>

        @* BOTONES *@
        <div class="modal-footer">
            @if (utility == "Crear")
            {
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#Limpiar">Limpiar</button>
            }

            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

            <button type="submit" class="btn btn-primary">@utility</button>
        </div>
    </EditForm>
</RBDProject.Components.Layout.Modal_Form>

<RBDProject.Components.Layout.Modal_Delete Delete="SendModel" _nombreModelo="@modelo.NomEm"></RBDProject.Components.Layout.Modal_Delete>
<RBDProject.Components.Layout.Modal_Limpiar Limpiar="Clean"></RBDProject.Components.Layout.Modal_Limpiar>

@code {
    private bool _disabled { get; set; } = false;
    private RbdTelefonoEmpleado telefonoEmpleado { get; set; } = new RbdTelefonoEmpleado();

    [Parameter]
    public RbdEmpleado modelo { get; set; } = new RbdEmpleado();

    [Parameter]
    public string utility { get; set; } = string.Empty;

    [Parameter]
    public List<RbdCiudade> _listCiudad { get; set; } = new List<RbdCiudade>();

    [Parameter]
    public List<RbdCalle> _listCalle { get; set; } = new List<RbdCalle>();

    [Parameter]
    public List<RbdCargo> _listCargo { get; set; } = new List<RbdCargo>();

    [Parameter]
    public List<RbdEstado> _listEstado { get; set; } = new List<RbdEstado>();

    [Parameter]
    public EventCallback<RbdEmpleado> UpdateModel { get; set; }

    [Parameter]
    public EventCallback<RbdEmpleado> AddModel { get; set; }

    [Parameter]
    public EventCallback<RbdEmpleado> DeleteModel { get; set; }

    [Parameter]
    public EventCallback<(RbdEmpleado, string)> SendTypeModal { get; set; }

    protected override void OnParametersSet()
    {
        if (modelo.CodEm != 0 && modelo.RbdTelefonoEmpleados.Count != 0)
        {
            telefonoEmpleado.TelEm = modelo.RbdTelefonoEmpleados.First().TelEm;
        }

        _disabled = false;

        switch (utility)
        {
            case "add": utility = "Crear"; break;
            case "update": utility = "Actualizar"; break;
            case "delete": utility = "Eliminar"; break;

            case "info":
                {
                    utility = "Informacion";
                    _disabled = true;
                }
                ; break;
        }

        if (utility == "Crear")
            ConfiguracionInicial();

        StateHasChanged();
    }

    public void Clean()
    {
        modelo = new RbdEmpleado();
        StateHasChanged();
    }

    public void ConfiguracionInicial()
    {
        if(_listCiudad != null && _listCiudad.Count() > 0)
        {
            modelo.IdCiudad = _listCiudad.First().IdCiudad;
        }

        if(_listCalle != null && _listCalle.Count() > 0)
        {
            modelo.IdCalle = _listCalle.First().IdCalle;
        }

        if(_listCargo != null && _listCargo.Count() > 0)
        {
            modelo.CodCar = _listCargo.First().CodCar;
        }

        modelo.CodGen = 1;

        if(_listEstado != null && _listEstado.Count() > 0)
        {
            modelo.CodEst = _listEstado.First().CodEst;
        }
    }

    public async Task SendModel()
    {
        try
        {

            modelo.RbdTelefonoEmpleados.First().TelEm = telefonoEmpleado.TelEm;
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        switch (utility)
        {


            case "Crear": {
                    await AddModel.InvokeAsync(modelo);
                    Clean();
                    var a = _jSRuntime.InvokeVoidAsync("Notification", "Empleados creados");
                    ConfiguracionInicial();
                    await SendTypeModal.InvokeAsync((new RbdEmpleado(), "add"));
                    StateHasChanged();
                }; break;
            case "Actualizar": { 
                await UpdateModel.InvokeAsync(modelo); 
                    var a = _jSRuntime.InvokeVoidAsync("Notification", "Empleados actualizados");
                    StateHasChanged();
            }; break;
            case "Eliminar": await DeleteModel.InvokeAsync(modelo); break;
        }
    }
}